<?php
/**
 * ContactRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.44
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Planfix\Model;

use \ArrayAccess;
use \Planfix\ObjectSerializer;

/**
 * ContactRequest Class Doc Comment
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'templateId' => 'int',
'sourceObjectId' => 'string',
'sourceDataVersion' => 'string',
'name' => 'string',
'midname' => 'string',
'lastname' => 'string',
'gender' => 'string',
'description' => 'string',
'address' => 'string',
'site' => 'string',
'email' => 'string',
'skype' => 'string',
'telegramId' => 'string',
'telegram' => 'string',
'facebook' => 'string',
'instagram' => 'string',
'vk' => 'string',
'group' => '\Planfix\Model\GroupRequest',
'isCompany' => 'bool',
'isDeleted' => 'bool',
'birthDate' => '\Planfix\Model\ContactRequestBirthDate',
'supervisors' => '\Planfix\Model\PeopleRequest',
'phones' => '\Planfix\Model\PhoneRequest[]',
'companies' => '\Planfix\Model\BaseEntity[]',
'contacts' => '\Planfix\Model\BaseEntity[]',
'customFieldData' => '\Planfix\Model\CustomFieldValueRequest[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'templateId' => 'int64',
'sourceObjectId' => 'uuid',
'sourceDataVersion' => null,
'name' => null,
'midname' => null,
'lastname' => null,
'gender' => null,
'description' => null,
'address' => null,
'site' => 'uri',
'email' => 'email',
'skype' => null,
'telegramId' => null,
'telegram' => null,
'facebook' => null,
'instagram' => null,
'vk' => null,
'group' => null,
'isCompany' => null,
'isDeleted' => null,
'birthDate' => null,
'supervisors' => null,
'phones' => null,
'companies' => null,
'contacts' => null,
'customFieldData' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'templateId' => 'templateId',
'sourceObjectId' => 'sourceObjectId',
'sourceDataVersion' => 'sourceDataVersion',
'name' => 'name',
'midname' => 'midname',
'lastname' => 'lastname',
'gender' => 'gender',
'description' => 'description',
'address' => 'address',
'site' => 'site',
'email' => 'email',
'skype' => 'skype',
'telegramId' => 'telegramId',
'telegram' => 'telegram',
'facebook' => 'facebook',
'instagram' => 'instagram',
'vk' => 'vk',
'group' => 'group',
'isCompany' => 'isCompany',
'isDeleted' => 'isDeleted',
'birthDate' => 'birthDate',
'supervisors' => 'supervisors',
'phones' => 'phones',
'companies' => 'companies',
'contacts' => 'contacts',
'customFieldData' => 'customFieldData'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'templateId' => 'setTemplateId',
'sourceObjectId' => 'setSourceObjectId',
'sourceDataVersion' => 'setSourceDataVersion',
'name' => 'setName',
'midname' => 'setMidname',
'lastname' => 'setLastname',
'gender' => 'setGender',
'description' => 'setDescription',
'address' => 'setAddress',
'site' => 'setSite',
'email' => 'setEmail',
'skype' => 'setSkype',
'telegramId' => 'setTelegramId',
'telegram' => 'setTelegram',
'facebook' => 'setFacebook',
'instagram' => 'setInstagram',
'vk' => 'setVk',
'group' => 'setGroup',
'isCompany' => 'setIsCompany',
'isDeleted' => 'setIsDeleted',
'birthDate' => 'setBirthDate',
'supervisors' => 'setSupervisors',
'phones' => 'setPhones',
'companies' => 'setCompanies',
'contacts' => 'setContacts',
'customFieldData' => 'setCustomFieldData'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'templateId' => 'getTemplateId',
'sourceObjectId' => 'getSourceObjectId',
'sourceDataVersion' => 'getSourceDataVersion',
'name' => 'getName',
'midname' => 'getMidname',
'lastname' => 'getLastname',
'gender' => 'getGender',
'description' => 'getDescription',
'address' => 'getAddress',
'site' => 'getSite',
'email' => 'getEmail',
'skype' => 'getSkype',
'telegramId' => 'getTelegramId',
'telegram' => 'getTelegram',
'facebook' => 'getFacebook',
'instagram' => 'getInstagram',
'vk' => 'getVk',
'group' => 'getGroup',
'isCompany' => 'getIsCompany',
'isDeleted' => 'getIsDeleted',
'birthDate' => 'getBirthDate',
'supervisors' => 'getSupervisors',
'phones' => 'getPhones',
'companies' => 'getCompanies',
'contacts' => 'getContacts',
'customFieldData' => 'getCustomFieldData'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GENDER_NOT_DEFINED = 'NotDefined';
const GENDER_FEMALE = 'Female';
const GENDER_MALE = 'Male';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_NOT_DEFINED,
self::GENDER_FEMALE,
self::GENDER_MALE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['templateId'] = isset($data['templateId']) ? $data['templateId'] : null;
        $this->container['sourceObjectId'] = isset($data['sourceObjectId']) ? $data['sourceObjectId'] : null;
        $this->container['sourceDataVersion'] = isset($data['sourceDataVersion']) ? $data['sourceDataVersion'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['midname'] = isset($data['midname']) ? $data['midname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['skype'] = isset($data['skype']) ? $data['skype'] : null;
        $this->container['telegramId'] = isset($data['telegramId']) ? $data['telegramId'] : null;
        $this->container['telegram'] = isset($data['telegram']) ? $data['telegram'] : null;
        $this->container['facebook'] = isset($data['facebook']) ? $data['facebook'] : null;
        $this->container['instagram'] = isset($data['instagram']) ? $data['instagram'] : null;
        $this->container['vk'] = isset($data['vk']) ? $data['vk'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['isCompany'] = isset($data['isCompany']) ? $data['isCompany'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['birthDate'] = isset($data['birthDate']) ? $data['birthDate'] : null;
        $this->container['supervisors'] = isset($data['supervisors']) ? $data['supervisors'] : null;
        $this->container['phones'] = isset($data['phones']) ? $data['phones'] : null;
        $this->container['companies'] = isset($data['companies']) ? $data['companies'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['customFieldData'] = isset($data['customFieldData']) ? $data['customFieldData'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets templateId
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['templateId'];
    }

    /**
     * Sets templateId
     *
     * @param int $templateId templateId
     *
     * @return $this
     */
    public function setTemplateId($templateId)
    {
        $this->container['templateId'] = $templateId;

        return $this;
    }

    /**
     * Gets sourceObjectId
     *
     * @return string
     */
    public function getSourceObjectId()
    {
        return $this->container['sourceObjectId'];
    }

    /**
     * Sets sourceObjectId
     *
     * @param string $sourceObjectId sourceObjectId
     *
     * @return $this
     */
    public function setSourceObjectId($sourceObjectId)
    {
        $this->container['sourceObjectId'] = $sourceObjectId;

        return $this;
    }

    /**
     * Gets sourceDataVersion
     *
     * @return string
     */
    public function getSourceDataVersion()
    {
        return $this->container['sourceDataVersion'];
    }

    /**
     * Sets sourceDataVersion
     *
     * @param string $sourceDataVersion sourceDataVersion
     *
     * @return $this
     */
    public function setSourceDataVersion($sourceDataVersion)
    {
        $this->container['sourceDataVersion'] = $sourceDataVersion;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets midname
     *
     * @return string
     */
    public function getMidname()
    {
        return $this->container['midname'];
    }

    /**
     * Sets midname
     *
     * @param string $midname midname
     *
     * @return $this
     */
    public function setMidname($midname)
    {
        $this->container['midname'] = $midname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets site
     *
     * @return string
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param string $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets skype
     *
     * @return string
     */
    public function getSkype()
    {
        return $this->container['skype'];
    }

    /**
     * Sets skype
     *
     * @param string $skype skype
     *
     * @return $this
     */
    public function setSkype($skype)
    {
        $this->container['skype'] = $skype;

        return $this;
    }

    /**
     * Gets telegramId
     *
     * @return string
     */
    public function getTelegramId()
    {
        return $this->container['telegramId'];
    }

    /**
     * Sets telegramId
     *
     * @param string $telegramId telegramId
     *
     * @return $this
     */
    public function setTelegramId($telegramId)
    {
        $this->container['telegramId'] = $telegramId;

        return $this;
    }

    /**
     * Gets telegram
     *
     * @return string
     */
    public function getTelegram()
    {
        return $this->container['telegram'];
    }

    /**
     * Sets telegram
     *
     * @param string $telegram telegram
     *
     * @return $this
     */
    public function setTelegram($telegram)
    {
        $this->container['telegram'] = $telegram;

        return $this;
    }

    /**
     * Gets facebook
     *
     * @return string
     */
    public function getFacebook()
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     *
     * @param string $facebook facebook
     *
     * @return $this
     */
    public function setFacebook($facebook)
    {
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets instagram
     *
     * @return string
     */
    public function getInstagram()
    {
        return $this->container['instagram'];
    }

    /**
     * Sets instagram
     *
     * @param string $instagram instagram
     *
     * @return $this
     */
    public function setInstagram($instagram)
    {
        $this->container['instagram'] = $instagram;

        return $this;
    }

    /**
     * Gets vk
     *
     * @return string
     */
    public function getVk()
    {
        return $this->container['vk'];
    }

    /**
     * Sets vk
     *
     * @param string $vk vk
     *
     * @return $this
     */
    public function setVk($vk)
    {
        $this->container['vk'] = $vk;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \Planfix\Model\GroupRequest
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \Planfix\Model\GroupRequest $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets isCompany
     *
     * @return bool
     */
    public function getIsCompany()
    {
        return $this->container['isCompany'];
    }

    /**
     * Sets isCompany
     *
     * @param bool $isCompany isCompany
     *
     * @return $this
     */
    public function setIsCompany($isCompany)
    {
        $this->container['isCompany'] = $isCompany;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted isDeleted
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets birthDate
     *
     * @return \Planfix\Model\ContactRequestBirthDate
     */
    public function getBirthDate()
    {
        return $this->container['birthDate'];
    }

    /**
     * Sets birthDate
     *
     * @param \Planfix\Model\ContactRequestBirthDate $birthDate birthDate
     *
     * @return $this
     */
    public function setBirthDate($birthDate)
    {
        $this->container['birthDate'] = $birthDate;

        return $this;
    }

    /**
     * Gets supervisors
     *
     * @return \Planfix\Model\PeopleRequest
     */
    public function getSupervisors()
    {
        return $this->container['supervisors'];
    }

    /**
     * Sets supervisors
     *
     * @param \Planfix\Model\PeopleRequest $supervisors supervisors
     *
     * @return $this
     */
    public function setSupervisors($supervisors)
    {
        $this->container['supervisors'] = $supervisors;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \Planfix\Model\PhoneRequest[]
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \Planfix\Model\PhoneRequest[] $phones phones
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets companies
     *
     * @return \Planfix\Model\BaseEntity[]
     */
    public function getCompanies()
    {
        return $this->container['companies'];
    }

    /**
     * Sets companies
     *
     * @param \Planfix\Model\BaseEntity[] $companies companies
     *
     * @return $this
     */
    public function setCompanies($companies)
    {
        $this->container['companies'] = $companies;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Planfix\Model\BaseEntity[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Planfix\Model\BaseEntity[] $contacts contacts
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets customFieldData
     *
     * @return \Planfix\Model\CustomFieldValueRequest[]
     */
    public function getCustomFieldData()
    {
        return $this->container['customFieldData'];
    }

    /**
     * Sets customFieldData
     *
     * @param \Planfix\Model\CustomFieldValueRequest[] $customFieldData customFieldData
     *
     * @return $this
     */
    public function setCustomFieldData($customFieldData)
    {
        $this->container['customFieldData'] = $customFieldData;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
