<?php
/**
 * ChangeDate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.44
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Planfix\Model;

use \ArrayAccess;
use \Planfix\ObjectSerializer;

/**
 * ChangeDate Class Doc Comment
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChangeDate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChangeDate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'oldDateTime' => '\Planfix\Model\TimePoint',
'newDateTime' => '\Planfix\Model\TimePoint',
'hasOldDate' => 'bool',
'hasNewDate' => 'bool',
'hasOldTime' => 'bool',
'hasNewTime' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'oldDateTime' => null,
'newDateTime' => null,
'hasOldDate' => null,
'hasNewDate' => null,
'hasOldTime' => null,
'hasNewTime' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oldDateTime' => 'oldDateTime',
'newDateTime' => 'newDateTime',
'hasOldDate' => 'hasOldDate',
'hasNewDate' => 'hasNewDate',
'hasOldTime' => 'hasOldTime',
'hasNewTime' => 'hasNewTime'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oldDateTime' => 'setOldDateTime',
'newDateTime' => 'setNewDateTime',
'hasOldDate' => 'setHasOldDate',
'hasNewDate' => 'setHasNewDate',
'hasOldTime' => 'setHasOldTime',
'hasNewTime' => 'setHasNewTime'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oldDateTime' => 'getOldDateTime',
'newDateTime' => 'getNewDateTime',
'hasOldDate' => 'getHasOldDate',
'hasNewDate' => 'getHasNewDate',
'hasOldTime' => 'getHasOldTime',
'hasNewTime' => 'getHasNewTime'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['oldDateTime'] = isset($data['oldDateTime']) ? $data['oldDateTime'] : null;
        $this->container['newDateTime'] = isset($data['newDateTime']) ? $data['newDateTime'] : null;
        $this->container['hasOldDate'] = isset($data['hasOldDate']) ? $data['hasOldDate'] : null;
        $this->container['hasNewDate'] = isset($data['hasNewDate']) ? $data['hasNewDate'] : null;
        $this->container['hasOldTime'] = isset($data['hasOldTime']) ? $data['hasOldTime'] : null;
        $this->container['hasNewTime'] = isset($data['hasNewTime']) ? $data['hasNewTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oldDateTime
     *
     * @return \Planfix\Model\TimePoint
     */
    public function getOldDateTime()
    {
        return $this->container['oldDateTime'];
    }

    /**
     * Sets oldDateTime
     *
     * @param \Planfix\Model\TimePoint $oldDateTime oldDateTime
     *
     * @return $this
     */
    public function setOldDateTime($oldDateTime)
    {
        $this->container['oldDateTime'] = $oldDateTime;

        return $this;
    }

    /**
     * Gets newDateTime
     *
     * @return \Planfix\Model\TimePoint
     */
    public function getNewDateTime()
    {
        return $this->container['newDateTime'];
    }

    /**
     * Sets newDateTime
     *
     * @param \Planfix\Model\TimePoint $newDateTime newDateTime
     *
     * @return $this
     */
    public function setNewDateTime($newDateTime)
    {
        $this->container['newDateTime'] = $newDateTime;

        return $this;
    }

    /**
     * Gets hasOldDate
     *
     * @return bool
     */
    public function getHasOldDate()
    {
        return $this->container['hasOldDate'];
    }

    /**
     * Sets hasOldDate
     *
     * @param bool $hasOldDate hasOldDate
     *
     * @return $this
     */
    public function setHasOldDate($hasOldDate)
    {
        $this->container['hasOldDate'] = $hasOldDate;

        return $this;
    }

    /**
     * Gets hasNewDate
     *
     * @return bool
     */
    public function getHasNewDate()
    {
        return $this->container['hasNewDate'];
    }

    /**
     * Sets hasNewDate
     *
     * @param bool $hasNewDate hasNewDate
     *
     * @return $this
     */
    public function setHasNewDate($hasNewDate)
    {
        $this->container['hasNewDate'] = $hasNewDate;

        return $this;
    }

    /**
     * Gets hasOldTime
     *
     * @return bool
     */
    public function getHasOldTime()
    {
        return $this->container['hasOldTime'];
    }

    /**
     * Sets hasOldTime
     *
     * @param bool $hasOldTime hasOldTime
     *
     * @return $this
     */
    public function setHasOldTime($hasOldTime)
    {
        $this->container['hasOldTime'] = $hasOldTime;

        return $this;
    }

    /**
     * Gets hasNewTime
     *
     * @return bool
     */
    public function getHasNewTime()
    {
        return $this->container['hasNewTime'];
    }

    /**
     * Sets hasNewTime
     *
     * @param bool $hasNewTime hasNewTime
     *
     * @return $this
     */
    public function setHasNewTime($hasNewTime)
    {
        $this->container['hasNewTime'] = $hasNewTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
