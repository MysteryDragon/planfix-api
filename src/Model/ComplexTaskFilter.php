<?php
/**
 * ComplexTaskFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.44
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Planfix\Model;

use \ArrayAccess;
use \Planfix\ObjectSerializer;

/**
 * ComplexTaskFilter Class Doc Comment
 *
 * @category Class
 * @description Complex task filters, &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;https://planfix.com/ru/help/REST_API:_%D0%A1%D0%BB%D0%BE%D0%B6%D0%BD%D1%8B%D0%B5_%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B_%D0%B7%D0%B0%D0%B4%D0%B0%D1%87\&quot;&gt; more information&lt;/a&gt;
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComplexTaskFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ComplexTaskFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'float',
'operator' => 'string',
'value' => 'AnyOfComplexTaskFilterValue',
'field' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
'operator' => null,
'value' => null,
'field' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
'operator' => 'operator',
'value' => 'value',
'field' => 'field'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
'operator' => 'setOperator',
'value' => 'setValue',
'field' => 'setField'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
'operator' => 'getOperator',
'value' => 'getValue',
'field' => 'getField'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_1 = 1;
const TYPE_2 = 2;
const TYPE_3 = 3;
const TYPE_7 = 7;
const TYPE_8 = 8;
const TYPE_10 = 10;
const TYPE_11 = 11;
const TYPE_12 = 12;
const TYPE_13 = 13;
const TYPE_14 = 14;
const TYPE_16 = 16;
const TYPE_17 = 17;
const TYPE_18 = 18;
const TYPE_19 = 19;
const TYPE_20 = 20;
const TYPE_21 = 21;
const TYPE_22 = 22;
const TYPE_23 = 23;
const TYPE_24 = 24;
const TYPE_25 = 25;
const TYPE_26 = 26;
const TYPE_28 = 28;
const TYPE_29 = 29;
const TYPE_33 = 33;
const TYPE_34 = 34;
const TYPE_35 = 35;
const TYPE_38 = 38;
const TYPE_39 = 39;
const TYPE_41 = 41;
const TYPE_51 = 51;
const TYPE_59 = 59;
const TYPE_60 = 60;
const TYPE_69 = 69;
const TYPE_70 = 70;
const TYPE_71 = 71;
const TYPE_72 = 72;
const TYPE_73 = 73;
const TYPE_79 = 79;
const TYPE_101 = 101;
const TYPE_102 = 102;
const TYPE_103 = 103;
const TYPE_105 = 105;
const TYPE_106 = 106;
const TYPE_107 = 107;
const TYPE_108 = 108;
const TYPE_109 = 109;
const TYPE_112 = 112;
const TYPE_113 = 113;
const TYPE_114 = 114;
const TYPE_152 = 152;
const TYPE_153 = 153;
const OPERATOR_EQUAL = 'equal';
const OPERATOR_NOTEQUAL = 'notequal';
const OPERATOR_GT = 'gt';
const OPERATOR_LT = 'lt';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_1,
self::TYPE_2,
self::TYPE_3,
self::TYPE_7,
self::TYPE_8,
self::TYPE_10,
self::TYPE_11,
self::TYPE_12,
self::TYPE_13,
self::TYPE_14,
self::TYPE_16,
self::TYPE_17,
self::TYPE_18,
self::TYPE_19,
self::TYPE_20,
self::TYPE_21,
self::TYPE_22,
self::TYPE_23,
self::TYPE_24,
self::TYPE_25,
self::TYPE_26,
self::TYPE_28,
self::TYPE_29,
self::TYPE_33,
self::TYPE_34,
self::TYPE_35,
self::TYPE_38,
self::TYPE_39,
self::TYPE_41,
self::TYPE_51,
self::TYPE_59,
self::TYPE_60,
self::TYPE_69,
self::TYPE_70,
self::TYPE_71,
self::TYPE_72,
self::TYPE_73,
self::TYPE_79,
self::TYPE_101,
self::TYPE_102,
self::TYPE_103,
self::TYPE_105,
self::TYPE_106,
self::TYPE_107,
self::TYPE_108,
self::TYPE_109,
self::TYPE_112,
self::TYPE_113,
self::TYPE_114,
self::TYPE_152,
self::TYPE_153,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR_EQUAL,
self::OPERATOR_NOTEQUAL,
self::OPERATOR_GT,
self::OPERATOR_LT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['operator'] === null) {
            $invalidProperties[] = "'operator' can't be null";
        }
        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($this->container['operator']) && !in_array($this->container['operator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return float
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param float $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowedValues = $this->getOperatorAllowableValues();
        if (!in_array($operator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets value
     *
     * @return AnyOfComplexTaskFilterValue
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param AnyOfComplexTaskFilterValue $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets field
     *
     * @return int
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param int $field field
     *
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
