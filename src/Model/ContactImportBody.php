<?php
/**
 * ContactImportBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.44
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Planfix\Model;

use \ArrayAccess;
use \Planfix\ObjectSerializer;

/**
 * ContactImportBody Class Doc Comment
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactImportBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'contact_import_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sourceId' => 'string',
'contactTemplateId' => 'int',
'companyTemplateId' => 'int',
'optionImportDuplicate' => 'string',
'optionImportUniqueField' => 'string',
'optionImportUniqueDefaultField' => 'string',
'contacts' => '\Planfix\Model\ContactRequest[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sourceId' => 'uuid',
'contactTemplateId' => null,
'companyTemplateId' => null,
'optionImportDuplicate' => null,
'optionImportUniqueField' => null,
'optionImportUniqueDefaultField' => null,
'contacts' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sourceId' => 'sourceId',
'contactTemplateId' => 'contactTemplateId',
'companyTemplateId' => 'companyTemplateId',
'optionImportDuplicate' => 'optionImportDuplicate',
'optionImportUniqueField' => 'optionImportUniqueField',
'optionImportUniqueDefaultField' => 'optionImportUniqueDefaultField',
'contacts' => 'contacts'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sourceId' => 'setSourceId',
'contactTemplateId' => 'setContactTemplateId',
'companyTemplateId' => 'setCompanyTemplateId',
'optionImportDuplicate' => 'setOptionImportDuplicate',
'optionImportUniqueField' => 'setOptionImportUniqueField',
'optionImportUniqueDefaultField' => 'setOptionImportUniqueDefaultField',
'contacts' => 'setContacts'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sourceId' => 'getSourceId',
'contactTemplateId' => 'getContactTemplateId',
'companyTemplateId' => 'getCompanyTemplateId',
'optionImportDuplicate' => 'getOptionImportDuplicate',
'optionImportUniqueField' => 'getOptionImportUniqueField',
'optionImportUniqueDefaultField' => 'getOptionImportUniqueDefaultField',
'contacts' => 'getContacts'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sourceId'] = isset($data['sourceId']) ? $data['sourceId'] : null;
        $this->container['contactTemplateId'] = isset($data['contactTemplateId']) ? $data['contactTemplateId'] : null;
        $this->container['companyTemplateId'] = isset($data['companyTemplateId']) ? $data['companyTemplateId'] : null;
        $this->container['optionImportDuplicate'] = isset($data['optionImportDuplicate']) ? $data['optionImportDuplicate'] : null;
        $this->container['optionImportUniqueField'] = isset($data['optionImportUniqueField']) ? $data['optionImportUniqueField'] : null;
        $this->container['optionImportUniqueDefaultField'] = isset($data['optionImportUniqueDefaultField']) ? $data['optionImportUniqueDefaultField'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sourceId
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['sourceId'];
    }

    /**
     * Sets sourceId
     *
     * @param string $sourceId sourceId
     *
     * @return $this
     */
    public function setSourceId($sourceId)
    {
        $this->container['sourceId'] = $sourceId;

        return $this;
    }

    /**
     * Gets contactTemplateId
     *
     * @return int
     */
    public function getContactTemplateId()
    {
        return $this->container['contactTemplateId'];
    }

    /**
     * Sets contactTemplateId
     *
     * @param int $contactTemplateId contactTemplateId
     *
     * @return $this
     */
    public function setContactTemplateId($contactTemplateId)
    {
        $this->container['contactTemplateId'] = $contactTemplateId;

        return $this;
    }

    /**
     * Gets companyTemplateId
     *
     * @return int
     */
    public function getCompanyTemplateId()
    {
        return $this->container['companyTemplateId'];
    }

    /**
     * Sets companyTemplateId
     *
     * @param int $companyTemplateId companyTemplateId
     *
     * @return $this
     */
    public function setCompanyTemplateId($companyTemplateId)
    {
        $this->container['companyTemplateId'] = $companyTemplateId;

        return $this;
    }

    /**
     * Gets optionImportDuplicate
     *
     * @return string
     */
    public function getOptionImportDuplicate()
    {
        return $this->container['optionImportDuplicate'];
    }

    /**
     * Sets optionImportDuplicate
     *
     * @param string $optionImportDuplicate Enum: ignore, update, none
     *
     * @return $this
     */
    public function setOptionImportDuplicate($optionImportDuplicate)
    {
        $this->container['optionImportDuplicate'] = $optionImportDuplicate;

        return $this;
    }

    /**
     * Gets optionImportUniqueField
     *
     * @return string
     */
    public function getOptionImportUniqueField()
    {
        return $this->container['optionImportUniqueField'];
    }

    /**
     * Sets optionImportUniqueField
     *
     * @param string $optionImportUniqueField Enum: email-phone-name-ifnot, email-phone-name, email-phone, phone, name, email-and-phone-and-name, number, custom  OR custom:{fieldId}
     *
     * @return $this
     */
    public function setOptionImportUniqueField($optionImportUniqueField)
    {
        $this->container['optionImportUniqueField'] = $optionImportUniqueField;

        return $this;
    }

    /**
     * Gets optionImportUniqueDefaultField
     *
     * @return string
     */
    public function getOptionImportUniqueDefaultField()
    {
        return $this->container['optionImportUniqueDefaultField'];
    }

    /**
     * Sets optionImportUniqueDefaultField
     *
     * @param string $optionImportUniqueDefaultField Enum: name, email-phone-name
     *
     * @return $this
     */
    public function setOptionImportUniqueDefaultField($optionImportUniqueDefaultField)
    {
        $this->container['optionImportUniqueDefaultField'] = $optionImportUniqueDefaultField;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Planfix\Model\ContactRequest[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Planfix\Model\ContactRequest[] $contacts contacts
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
