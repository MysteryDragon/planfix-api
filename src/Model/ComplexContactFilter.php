<?php
/**
 * ComplexContactFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.44
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Planfix\Model;

use \ArrayAccess;
use \Planfix\ObjectSerializer;

/**
 * ComplexContactFilter Class Doc Comment
 *
 * @category Class
 * @description Complex contact filters, &lt;a target&#x3D;\&quot;blank\&quot; href&#x3D;\&quot;https://help.planfix.com/ru/REST_API:_%D0%A1%D0%BB%D0%BE%D0%B6%D0%BD%D1%8B%D0%B5_%D1%84%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B_%D0%BA%D0%BE%D0%BD%D1%82%D0%B0%D0%BA%D1%82%D0%BE%D0%B2\&quot;&gt; more information&lt;/a&gt;
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComplexContactFilter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ComplexContactFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'float',
'operator' => 'string',
'value' => 'AnyOfComplexContactFilterValue',
'field' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
'operator' => null,
'value' => null,
'field' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
'operator' => 'operator',
'value' => 'value',
'field' => 'field'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
'operator' => 'setOperator',
'value' => 'setValue',
'field' => 'setField'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
'operator' => 'getOperator',
'value' => 'getValue',
'field' => 'getField'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_1 = 1;
const TYPE_2 = 2;
const TYPE_12 = 12;
const TYPE_47 = 47;
const TYPE_48 = 48;
const TYPE_4001 = 4001;
const TYPE_4002 = 4002;
const TYPE_4003 = 4003;
const TYPE_4004 = 4004;
const TYPE_4005 = 4005;
const TYPE_4006 = 4006;
const TYPE_4007 = 4007;
const TYPE_4008 = 4008;
const TYPE_4010 = 4010;
const TYPE_4011 = 4011;
const TYPE_4012 = 4012;
const TYPE_4013 = 4013;
const TYPE_4014 = 4014;
const TYPE_4015 = 4015;
const TYPE_4016 = 4016;
const TYPE_4017 = 4017;
const TYPE_4018 = 4018;
const TYPE_4101 = 4101;
const TYPE_4102 = 4102;
const TYPE_4103 = 4103;
const TYPE_4104 = 4104;
const TYPE_4105 = 4105;
const TYPE_4106 = 4106;
const TYPE_4107 = 4107;
const TYPE_4108 = 4108;
const TYPE_4109 = 4109;
const TYPE_4110 = 4110;
const TYPE_4111 = 4111;
const TYPE_4112 = 4112;
const TYPE_4113 = 4113;
const TYPE_4114 = 4114;
const TYPE_4115 = 4115;
const TYPE_4116 = 4116;
const TYPE_4117 = 4117;
const TYPE_4118 = 4118;
const TYPE_4152 = 4152;
const TYPE_4153 = 4153;
const TYPE_4221 = 4221;
const TYPE_4222 = 4222;
const TYPE_4223 = 4223;
const TYPE_4231 = 4231;
const OPERATOR_EQUAL = 'equal';
const OPERATOR_NOTEQUAL = 'notequal';
const OPERATOR_GT = 'gt';
const OPERATOR_LT = 'lt';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_1,
self::TYPE_2,
self::TYPE_12,
self::TYPE_47,
self::TYPE_48,
self::TYPE_4001,
self::TYPE_4002,
self::TYPE_4003,
self::TYPE_4004,
self::TYPE_4005,
self::TYPE_4006,
self::TYPE_4007,
self::TYPE_4008,
self::TYPE_4010,
self::TYPE_4011,
self::TYPE_4012,
self::TYPE_4013,
self::TYPE_4014,
self::TYPE_4015,
self::TYPE_4016,
self::TYPE_4017,
self::TYPE_4018,
self::TYPE_4101,
self::TYPE_4102,
self::TYPE_4103,
self::TYPE_4104,
self::TYPE_4105,
self::TYPE_4106,
self::TYPE_4107,
self::TYPE_4108,
self::TYPE_4109,
self::TYPE_4110,
self::TYPE_4111,
self::TYPE_4112,
self::TYPE_4113,
self::TYPE_4114,
self::TYPE_4115,
self::TYPE_4116,
self::TYPE_4117,
self::TYPE_4118,
self::TYPE_4152,
self::TYPE_4153,
self::TYPE_4221,
self::TYPE_4222,
self::TYPE_4223,
self::TYPE_4231,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR_EQUAL,
self::OPERATOR_NOTEQUAL,
self::OPERATOR_GT,
self::OPERATOR_LT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['operator'] === null) {
            $invalidProperties[] = "'operator' can't be null";
        }
        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($this->container['operator']) && !in_array($this->container['operator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return float
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param float $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowedValues = $this->getOperatorAllowableValues();
        if (!in_array($operator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets value
     *
     * @return AnyOfComplexContactFilterValue
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param AnyOfComplexContactFilterValue $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets field
     *
     * @return int
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param int $field field
     *
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
