<?php
/**
 * CommentResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Planfix REST API
 *
 * Documentation for Planfix REST API. <br> Generated <a href=\"https://root/restapidocs/swagger.json\">swagger.json</a>
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.44
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Planfix\Model;

use \ArrayAccess;
use \Planfix\ObjectSerializer;

/**
 * CommentResponse Class Doc Comment
 *
 * @category Class
 * @package  Planfix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommentResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'sourceObjectId' => 'string',
'sourceDataVersion' => 'string',
'dateTime' => '\Planfix\Model\TimePoint',
'type' => 'string',
'fromType' => 'string',
'description' => 'string',
'task' => '\Planfix\Model\BaseEntity',
'project' => '\Planfix\Model\BaseEntity',
'contact' => '\Planfix\Model\PersonResponse',
'owner' => '\Planfix\Model\PersonResponse',
'isDeleted' => 'bool',
'isPinned' => 'bool',
'isHidden' => 'bool',
'isNotRead' => 'bool',
'recipients' => '\Planfix\Model\PeopleResponse',
'reminders' => '\Planfix\Model\Reminder[]',
'dataTags' => '\Planfix\Model\CommentResponseDataTags[]',
'files' => '\Planfix\Model\FileResponse[]',
'changeTaskStartDate' => '\Planfix\Model\ChangeDate',
'changeTaskExpectDate' => '\Planfix\Model\ChangeDate',
'changeStatus' => '\Planfix\Model\CommentResponseChangeStatus'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'sourceObjectId' => 'uuid',
'sourceDataVersion' => null,
'dateTime' => null,
'type' => null,
'fromType' => null,
'description' => null,
'task' => null,
'project' => null,
'contact' => null,
'owner' => null,
'isDeleted' => null,
'isPinned' => null,
'isHidden' => null,
'isNotRead' => null,
'recipients' => null,
'reminders' => null,
'dataTags' => null,
'files' => null,
'changeTaskStartDate' => null,
'changeTaskExpectDate' => null,
'changeStatus' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'sourceObjectId' => 'sourceObjectId',
'sourceDataVersion' => 'sourceDataVersion',
'dateTime' => 'dateTime',
'type' => 'type',
'fromType' => 'fromType',
'description' => 'description',
'task' => 'task',
'project' => 'project',
'contact' => 'contact',
'owner' => 'owner',
'isDeleted' => 'isDeleted',
'isPinned' => 'isPinned',
'isHidden' => 'isHidden',
'isNotRead' => 'isNotRead',
'recipients' => 'recipients',
'reminders' => 'reminders',
'dataTags' => 'dataTags',
'files' => 'files',
'changeTaskStartDate' => 'changeTaskStartDate',
'changeTaskExpectDate' => 'changeTaskExpectDate',
'changeStatus' => 'changeStatus'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'sourceObjectId' => 'setSourceObjectId',
'sourceDataVersion' => 'setSourceDataVersion',
'dateTime' => 'setDateTime',
'type' => 'setType',
'fromType' => 'setFromType',
'description' => 'setDescription',
'task' => 'setTask',
'project' => 'setProject',
'contact' => 'setContact',
'owner' => 'setOwner',
'isDeleted' => 'setIsDeleted',
'isPinned' => 'setIsPinned',
'isHidden' => 'setIsHidden',
'isNotRead' => 'setIsNotRead',
'recipients' => 'setRecipients',
'reminders' => 'setReminders',
'dataTags' => 'setDataTags',
'files' => 'setFiles',
'changeTaskStartDate' => 'setChangeTaskStartDate',
'changeTaskExpectDate' => 'setChangeTaskExpectDate',
'changeStatus' => 'setChangeStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'sourceObjectId' => 'getSourceObjectId',
'sourceDataVersion' => 'getSourceDataVersion',
'dateTime' => 'getDateTime',
'type' => 'getType',
'fromType' => 'getFromType',
'description' => 'getDescription',
'task' => 'getTask',
'project' => 'getProject',
'contact' => 'getContact',
'owner' => 'getOwner',
'isDeleted' => 'getIsDeleted',
'isPinned' => 'getIsPinned',
'isHidden' => 'getIsHidden',
'isNotRead' => 'getIsNotRead',
'recipients' => 'getRecipients',
'reminders' => 'getReminders',
'dataTags' => 'getDataTags',
'files' => 'getFiles',
'changeTaskStartDate' => 'getChangeTaskStartDate',
'changeTaskExpectDate' => 'getChangeTaskExpectDate',
'changeStatus' => 'getChangeStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_COMMENT = 'Comment';
const TYPE_REMINDER = 'Reminder';
const TYPE_NONE = 'None';
const FROM_TYPE_PLANFIX = 'Planfix';
const FROM_TYPE_TELEGRAM = 'Telegram';
const FROM_TYPE_FACEBOOK = 'Facebook';
const FROM_TYPE_VIBER = 'Viber';
const FROM_TYPE_WHATS_APP = 'WhatsApp';
const FROM_TYPE_MOBILE = 'Mobile';
const FROM_TYPE_EMAIL = 'Email';
const FROM_TYPE_CHARTA = 'Charta';
const FROM_TYPE_SKYPE = 'Skype';
const FROM_TYPE_YANDEX_CHAT = 'YandexChat';
const FROM_TYPE_AVITO = 'Avito';
const FROM_TYPE_WEB_CHAT_API = 'WebChatApi';
const FROM_TYPE_NONE = 'None';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_COMMENT,
self::TYPE_REMINDER,
self::TYPE_NONE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFromTypeAllowableValues()
    {
        return [
            self::FROM_TYPE_PLANFIX,
self::FROM_TYPE_TELEGRAM,
self::FROM_TYPE_FACEBOOK,
self::FROM_TYPE_VIBER,
self::FROM_TYPE_WHATS_APP,
self::FROM_TYPE_MOBILE,
self::FROM_TYPE_EMAIL,
self::FROM_TYPE_CHARTA,
self::FROM_TYPE_SKYPE,
self::FROM_TYPE_YANDEX_CHAT,
self::FROM_TYPE_AVITO,
self::FROM_TYPE_WEB_CHAT_API,
self::FROM_TYPE_NONE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sourceObjectId'] = isset($data['sourceObjectId']) ? $data['sourceObjectId'] : null;
        $this->container['sourceDataVersion'] = isset($data['sourceDataVersion']) ? $data['sourceDataVersion'] : null;
        $this->container['dateTime'] = isset($data['dateTime']) ? $data['dateTime'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['fromType'] = isset($data['fromType']) ? $data['fromType'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['task'] = isset($data['task']) ? $data['task'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['isDeleted'] = isset($data['isDeleted']) ? $data['isDeleted'] : null;
        $this->container['isPinned'] = isset($data['isPinned']) ? $data['isPinned'] : null;
        $this->container['isHidden'] = isset($data['isHidden']) ? $data['isHidden'] : null;
        $this->container['isNotRead'] = isset($data['isNotRead']) ? $data['isNotRead'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['reminders'] = isset($data['reminders']) ? $data['reminders'] : null;
        $this->container['dataTags'] = isset($data['dataTags']) ? $data['dataTags'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['changeTaskStartDate'] = isset($data['changeTaskStartDate']) ? $data['changeTaskStartDate'] : null;
        $this->container['changeTaskExpectDate'] = isset($data['changeTaskExpectDate']) ? $data['changeTaskExpectDate'] : null;
        $this->container['changeStatus'] = isset($data['changeStatus']) ? $data['changeStatus'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFromTypeAllowableValues();
        if (!is_null($this->container['fromType']) && !in_array($this->container['fromType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fromType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sourceObjectId
     *
     * @return string
     */
    public function getSourceObjectId()
    {
        return $this->container['sourceObjectId'];
    }

    /**
     * Sets sourceObjectId
     *
     * @param string $sourceObjectId sourceObjectId
     *
     * @return $this
     */
    public function setSourceObjectId($sourceObjectId)
    {
        $this->container['sourceObjectId'] = $sourceObjectId;

        return $this;
    }

    /**
     * Gets sourceDataVersion
     *
     * @return string
     */
    public function getSourceDataVersion()
    {
        return $this->container['sourceDataVersion'];
    }

    /**
     * Sets sourceDataVersion
     *
     * @param string $sourceDataVersion sourceDataVersion
     *
     * @return $this
     */
    public function setSourceDataVersion($sourceDataVersion)
    {
        $this->container['sourceDataVersion'] = $sourceDataVersion;

        return $this;
    }

    /**
     * Gets dateTime
     *
     * @return \Planfix\Model\TimePoint
     */
    public function getDateTime()
    {
        return $this->container['dateTime'];
    }

    /**
     * Sets dateTime
     *
     * @param \Planfix\Model\TimePoint $dateTime dateTime
     *
     * @return $this
     */
    public function setDateTime($dateTime)
    {
        $this->container['dateTime'] = $dateTime;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets fromType
     *
     * @return string
     */
    public function getFromType()
    {
        return $this->container['fromType'];
    }

    /**
     * Sets fromType
     *
     * @param string $fromType fromType
     *
     * @return $this
     */
    public function setFromType($fromType)
    {
        $allowedValues = $this->getFromTypeAllowableValues();
        if (!is_null($fromType) && !in_array($fromType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fromType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fromType'] = $fromType;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets task
     *
     * @return \Planfix\Model\BaseEntity
     */
    public function getTask()
    {
        return $this->container['task'];
    }

    /**
     * Sets task
     *
     * @param \Planfix\Model\BaseEntity $task task
     *
     * @return $this
     */
    public function setTask($task)
    {
        $this->container['task'] = $task;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Planfix\Model\BaseEntity
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Planfix\Model\BaseEntity $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Planfix\Model\PersonResponse
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Planfix\Model\PersonResponse $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Planfix\Model\PersonResponse
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Planfix\Model\PersonResponse $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets isDeleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['isDeleted'];
    }

    /**
     * Sets isDeleted
     *
     * @param bool $isDeleted isDeleted
     *
     * @return $this
     */
    public function setIsDeleted($isDeleted)
    {
        $this->container['isDeleted'] = $isDeleted;

        return $this;
    }

    /**
     * Gets isPinned
     *
     * @return bool
     */
    public function getIsPinned()
    {
        return $this->container['isPinned'];
    }

    /**
     * Sets isPinned
     *
     * @param bool $isPinned isPinned
     *
     * @return $this
     */
    public function setIsPinned($isPinned)
    {
        $this->container['isPinned'] = $isPinned;

        return $this;
    }

    /**
     * Gets isHidden
     *
     * @return bool
     */
    public function getIsHidden()
    {
        return $this->container['isHidden'];
    }

    /**
     * Sets isHidden
     *
     * @param bool $isHidden isHidden
     *
     * @return $this
     */
    public function setIsHidden($isHidden)
    {
        $this->container['isHidden'] = $isHidden;

        return $this;
    }

    /**
     * Gets isNotRead
     *
     * @return bool
     */
    public function getIsNotRead()
    {
        return $this->container['isNotRead'];
    }

    /**
     * Sets isNotRead
     *
     * @param bool $isNotRead isNotRead
     *
     * @return $this
     */
    public function setIsNotRead($isNotRead)
    {
        $this->container['isNotRead'] = $isNotRead;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \Planfix\Model\PeopleResponse
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \Planfix\Model\PeopleResponse $recipients recipients
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets reminders
     *
     * @return \Planfix\Model\Reminder[]
     */
    public function getReminders()
    {
        return $this->container['reminders'];
    }

    /**
     * Sets reminders
     *
     * @param \Planfix\Model\Reminder[] $reminders reminders
     *
     * @return $this
     */
    public function setReminders($reminders)
    {
        $this->container['reminders'] = $reminders;

        return $this;
    }

    /**
     * Gets dataTags
     *
     * @return \Planfix\Model\CommentResponseDataTags[]
     */
    public function getDataTags()
    {
        return $this->container['dataTags'];
    }

    /**
     * Sets dataTags
     *
     * @param \Planfix\Model\CommentResponseDataTags[] $dataTags dataTags
     *
     * @return $this
     */
    public function setDataTags($dataTags)
    {
        $this->container['dataTags'] = $dataTags;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Planfix\Model\FileResponse[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Planfix\Model\FileResponse[] $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets changeTaskStartDate
     *
     * @return \Planfix\Model\ChangeDate
     */
    public function getChangeTaskStartDate()
    {
        return $this->container['changeTaskStartDate'];
    }

    /**
     * Sets changeTaskStartDate
     *
     * @param \Planfix\Model\ChangeDate $changeTaskStartDate changeTaskStartDate
     *
     * @return $this
     */
    public function setChangeTaskStartDate($changeTaskStartDate)
    {
        $this->container['changeTaskStartDate'] = $changeTaskStartDate;

        return $this;
    }

    /**
     * Gets changeTaskExpectDate
     *
     * @return \Planfix\Model\ChangeDate
     */
    public function getChangeTaskExpectDate()
    {
        return $this->container['changeTaskExpectDate'];
    }

    /**
     * Sets changeTaskExpectDate
     *
     * @param \Planfix\Model\ChangeDate $changeTaskExpectDate changeTaskExpectDate
     *
     * @return $this
     */
    public function setChangeTaskExpectDate($changeTaskExpectDate)
    {
        $this->container['changeTaskExpectDate'] = $changeTaskExpectDate;

        return $this;
    }

    /**
     * Gets changeStatus
     *
     * @return \Planfix\Model\CommentResponseChangeStatus
     */
    public function getChangeStatus()
    {
        return $this->container['changeStatus'];
    }

    /**
     * Sets changeStatus
     *
     * @param \Planfix\Model\CommentResponseChangeStatus $changeStatus changeStatus
     *
     * @return $this
     */
    public function setChangeStatus($changeStatus)
    {
        $this->container['changeStatus'] = $changeStatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
